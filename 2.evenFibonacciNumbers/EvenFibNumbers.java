/*
	Even Fibonacci Numbers: Problem 2 Project Euler

	Each new term in the Fibonacci sequence is generated by 
	adding the previous two terms. By starting with 1 and 2, 
	the first 10 terms will be:
		=> 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	By considering the terms in the Fibonacci sequence whose 
	values do not exceed four million, find the sum of 
	the even-valued terms.
*/

import java.util.ArrayList;
import java.util.List;
import java.util.*;

/*
	This is a correct implementation. It is a 2 method 
	sequence I likely could have pushed into 1 method
	and may do later. 

	Basically generateFibSeq generates a fibonacci 
	sequence where each value in the sequence is below
	a defined value. 

	Once this sequence is built, we go through each value
	in the sequence and if it is even we add it to a sum
	and return the sum
*/
public class EvenFibNumbers {
	/*
		First I want to just generate a Fibonacci sequence
		with each value under a provided limit, x. 

		The way to do this (I think) is to provide 2 starting 
		terms, in this example's case it would be 1 and 2,
		and create a collection that grows as the sequence 
		grows. Position i = (position i - 1) + (position i -2)
		while increasing the value of i each iteration. 
	*/
	public static List generateFibSeq(int x, int term1, int term2) {
		/*
			Created an ArrayList because it is resizeable and
			that is a ncessary component of my algorithm. You
			can't store primitive types in an ArrayList, but
			the compiler uses Autoboxing and Unboxing to compile
			the primitives I use as Objects of their wrappers
			(in this case int is autoboxed to Integer). 

			It also uses generics I think with the <Integer>.
		*/
		List<Integer> fibSeq = new ArrayList<>();
		
		fibSeq.add(term1);
		fibSeq.add(term2);

		/*
			int y is going to be the next value in my Fibonacci
			sequence.
		*/
		int y = 0;
		/*
			Boolean keepGoing is the conditional value in my while
			loop.
		*/
		boolean keepGoing = true;
		/*
			The while loop sets an integer z to the size of the 
			current ArrayList. Once we have the size, we can 
			compute the next integer in the Fibonacci sequence.
			I do this by adding the last and second-to-last indicies
			together. They indicies are sorted by value (lowest-highest)
			so this works. Otherwise, I'd have to account for that. 

			If the next value, y, is less than the defined value
			we add it and go again, otherwise we don't keep going.
		*/
		while (keepGoing) {
			
			int z = fibSeq.size();
			/*
				Starts at 0
			*/
			y = fibSeq.get(z - 1) + fibSeq.get(z - 2);

			if (y < x) {
				fibSeq.add(y);
			} else {
				keepGoing = false;
			}
			
		}
		/*
			Here we return the list
		*/
		return fibSeq;

		/*
			Prints out the Fibonacci list for testing
		*/
		// for (Integer i : fibSeq) {
		// 	System.out.println(i); 
		// }
	}

	/*
		Super simple method that returns the sum of the even values
		of the passed List of Integers.
	*/
	public static int sumEvens(List<Integer> x) {
		
		int sum = 0;

		for (Integer i : x) {
			sum = (i % 2 == 0) ? sum += i: sum;
		}

		return sum;
	}


	public static void main(String[] args) {

		int x, y, z;

		Scanner num = new Scanner(System.in);

		System.out.print("Please enter the max value the" +
		 " fibonacci values can approach: ");
		x = num.nextInt();

		System.out.print("Please enter the first term of the" +
			" Fibonacci sequence: ");
		y = num.nextInt();

		System.out.print("Please enter the second term of the" +
			" Fibonacci sequence: ");
		z = num.nextInt();

		System.out.println(sumEvens(generateFibSeq(x, y, z)));
	}
}