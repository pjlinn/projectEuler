package com.pjlinn.seriesProduct;

/*
	Largest Product in a Series (Problem 8)
		Find the greatest product of five consecutive 
		digits in the 1000-digit number.

		73167176531330624919225119674426574742355349194934
		96983520312774506326239578318016984801869478851843
		85861560789112949495459501737958331952853208805511
		12540698747158523863050715693290963295227443043557
		66896648950445244523161731856403098711121722383113
		62229893423380308135336276614282806444486645238749
		30358907296290491560440772390713810515859307960866
		70172427121883998797908792274921901699720888093776
		65727333001053367881220235421809751254540594752243
		52584907711670556013604839586446706324415722155397
		53697817977846174064955149290862569321978468622482
		83972241375657056057490261407972968652414535100474
		82166370484403199890008895243450658541227588666881
		16427171479924442928230863465674813919123162824586
		17866458359124566529476545682848912883142607690042
		24219022671055626321111109370544217506941658960408
		07198403850962455444362981230987879927244284909188
		84580156166097919133875499200524063689912560717606
		05886116467109405077541002256983155200055935729725
		71636269561882670428252483600823257530420752963450
*/

public class LongestProdSeries {
	/*
		Pretty straightforward. Inputed the set as a string then
		parsed it using the CharAt(i) method. The only tricky
		part was the char -> int conversion. As noted from a 
		forum:
			"suppose your character is between '0' and '9.' Notice 
			that the "decimal" ASCII code for '0' is 48 and for '9' 
			it is 57. So if you have a primitive variable of type char, 
			and it is somewhere between char c = '0' and char c = '9', 
			then to deal with the corresponding integer 
			you subtract 48.
			e.g. if char c = '5'; then the expression (c - 48) == 5 
			returns true;"

		I just used Character.getNumericValue() : note I may not 
		need all the temp variables.

		Note: another forum also mentioned the Character.digit()
		method.
	*/
	public static int fiveDigitSet () {
		String set = "73167176531330624919225119674426574742355349194934" +
					"96983520312774506326239578318016984801869478851843" +
					"85861560789112949495459501737958331952853208805511" +
					"12540698747158523863050715693290963295227443043557" +
					"66896648950445244523161731856403098711121722383113" +
					"62229893423380308135336276614282806444486645238749" +
					"30358907296290491560440772390713810515859307960866" +
					"70172427121883998797908792274921901699720888093776" +
					"65727333001053367881220235421809751254540594752243" +
					"52584907711670556013604839586446706324415722155397" +
					"53697817977846174064955149290862569321978468622482" +
					"83972241375657056057490261407972968652414535100474" +
					"82166370484403199890008895243450658541227588666881" +
					"16427171479924442928230863465674813919123162824586" +
					"17866458359124566529476545682848912883142607690042" +
					"24219022671055626321111109370544217506941658960408" +
					"07198403850962455444362981230987879927244284909188" +
					"84580156166097919133875499200524063689912560717606" +
					"05886116467109405077541002256983155200055935729725" + 
					"71636269561882670428252483600823257530420752963450";
		
		int product = 0;
		int temp = 0;

		for (int i = 0; i < 995; i++) {
			char c = set.charAt(i);
			temp = Character.getNumericValue(c);
			for (int j = 1; j < 5; j++) {
				char d = set.charAt(i+j);
				int temp2 = Character.getNumericValue(d);
				temp *= temp2;
			}
			// product = (temp > product) ? temp : product;
			if (temp > product) {
				product = temp;	
				System.out.println(set.charAt(i) + "*" + set.charAt(i+1) +
					"*" + set.charAt(i+2) + "*" + set.charAt(i+3) + "*" +
						set.charAt(i+4) + " = " + product);
			}
		}

		return product;
}

	public static void main(String[] args) {
		long currTime = System.currentTimeMillis();
		System.out.println(fiveDigitSet());
		System.out.println("Time taken (ms): " + 
			(System.currentTimeMillis() - currTime));
	}
}