/*
	Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The 
	first ten pentagonal numbers are:

	1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

	It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their 
	difference, 70 − 22 = 48, is not pentagonal.

	Find the pair of pentagonal numbers, Pj and Pk, for which their 
	sum and difference are pentagonal and D = |Pk − Pj| is minimised; 
	what is the value of D?

	------

	Pretty straightforward, except I didn't know how many pentagonal numbers
	I'd actually have to calculate. Orginally I just tried to use ArrayLists
	however the main loop was taking forever to finish by n = 10,000 and 
	hadn't found a single pair.

	I could determine and immediate way to optimize the loop setting
	the difference and sum, but I figured the ArrayList.contains() 
	method wasn't ideal as compared to a HashSet or HashMap which offers
	constant time lookup. I tried to do everything in a HashSet, but 
	I wasn't sure how to use an iterator instead of the for loop I set
	up. So I kept the for loop and generated 2 sets of pentagonal numbers:
	1 an ArrayList to loop through, the other a HashSet to use the
	contains. 

	I realize I could have done this one generating the pentagonal
	numbers once, using a HashMap or an iterator with the HashSet, or
	some other way. But I felt this was easiest to transition from.

	I'd like to go back and try just using the HashSet and iterator.

	It also seems fast based on the forum to just test the resulting number
	instead of using a lookup.
*/

import java.util.ArrayList;
import java.util.HashSet;

public class PentagonNumbers {
	// Generates an ArrayList of Pentagonal Numbers
	private static ArrayList<Double> generatePentagonalNumbers (int nthDigit) {
		ArrayList<Double> pentagonalNumbers = new ArrayList<Double>();

		for (double i = 1; i <= nthDigit; i++) {
			double result = i * (3 * i - 1) / 2;
			pentagonalNumbers.add(result);
		}
		return pentagonalNumbers;
	}
	// Generates a HashSet of Pentagonal Numbers, faster lookup
	private static HashSet<Double> generatePentagonalNumbers (double nthDigit) {
		HashSet<Double> pentagonalNumbers = new HashSet<Double>();

		for (double i = 1; i <= nthDigit; i++) {
			double result = i * (3 * i - 1) / 2;
			pentagonalNumbers.add(result);
		}
		return pentagonalNumbers;
	}
	// Run the loop calculating the addition and difference and lookup
	public static void main(String[] args) {
		int nthDigit = 10000;
		double nthDouble = 10000.;

		ArrayList<Double> pentagonalNumbers = new ArrayList<Double>(generatePentagonalNumbers(nthDigit));
		HashSet<Double> pentagonalHash = new HashSet<Double>(generatePentagonalNumbers(nthDouble));

		for (int i = 0; i < pentagonalNumbers.size() - 1; i++) {
			for (int j = i + 1; j < pentagonalNumbers.size(); j++) {
				double sum = pentagonalNumbers.get(i) + pentagonalNumbers.get(j);
				double difference = pentagonalNumbers.get(j) - pentagonalNumbers.get(i);
				if (pentagonalHash.contains(sum) && pentagonalHash.contains(difference)) {
					System.out.println("Index: " + i + " and " + j + " -> Their difference: " + 
						Math.abs(pentagonalNumbers.get(j) - pentagonalNumbers.get(i)));
				}
			}
			
		}	
	}
}