/*
	Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal 
	numbers are all figurate (polygonal) numbers and are generated by 
	the following formulae:

	Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
	Square	 		P4,n=n2	 	1, 4, 9, 16, 25, ...
	Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
	Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
	Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
	Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
	
	The ordered set of three 4-digit numbers: 8128, 2882, 8281, has 
	three interesting properties.

	The set is cyclic, in that the last two digits of each number is 
	the first two digits of the next number (including the last number 
	with the first).

	Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), 
	and pentagonal (P5,44=2882), is represented by a different number 
	in the set.

	This is the only set of 4-digit numbers with this property.
	Find the sum of the only ordered set of six cyclic 4-digit numbers 
	for which each polygonal type: triangle, square, pentagonal, 
	hexagonal, heptagonal, and octagonal, is represented by a different
	 number in the set.
*/

import java.util.HashSet;

public class CyclicalFigurateNumbers {

	// Triangle numbers method, generates a list of triangle numbers
	public static HashSet<Integer> triangleNumberGenerator() {
		HashSet<Integer> triangleNumbers = new HashSet<Integer>();

		int result = 0;
		int n = 1;

		while(result < 10000) {
			result = n * (n + 1) / 2;
			if (result >= 1000 && result < 10000) { triangleNumbers.add(result); }
			n++;
		}
		return triangleNumbers;
	}

	// Square numbers method
	public static HashSet<Integer> squareNumberGenerator() {
		HashSet<Integer> squareNumbers = new HashSet();

		int result = 0;
		int n = 1; 

		while (result < 10000) {
			result = n * n;
			if (result >= 1000 && result < 10000) { squareNumbers.add(result); }
			n++;
		}
		return squareNumbers;
	}

	// Pentagonal numbers method
	public static HashSet<Integer> pentagonalNumberGenerator() {
		HashSet<Integer> pentagonalNumbers = new HashSet();

		int result = 0;
		int n = 1;

		while (result < 10000) {
			result = n * (3 * n - 1) / 2;
			if (result < 10000) { pentagonalNumbers.add(result); }
			n++;
		}
		return pentagonalNumbers;
	}

	// main method
	public static void main(String[] args) {
		
		HashSet<Integer> triangleNumbers = new HashSet(triangleNumberGenerator());
		HashSet<Integer> squareNumbers = new HashSet(squareNumberGenerator());
		HashSet<Integer> pentagonalNumbers = new HashSet(pentagonalNumberGenerator());

		System.out.println(triangleNumbers.contains(8128));
		System.out.println(squareNumbers.contains(8281));
		System.out.println(pentagonalNumbers.contains(2882));
	}
}